import {useEffect, useState} from 'react';
import Head from "next/head";
import styles from "../styles/Home.module.css";

const startingCards = [
  {
    name: "bunny",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "dog",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "cat",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "dog",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "cat",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "bunny",
    open: false,
    img:"",
    disabled: false
  },

  {
    name: "turtle",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "turtle",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "lion",
    open: false,
    img:"",
    disabled: false
  },

  {
    name: "lion",
    open: false,
    img:"",
    disabled: false
  },
  {
    name: "swan",
    open: false,
    img:"",
    disabled: false
  },

  {
    name: "swan",
    open: false,
    img:"",
    disabled: false
  },
];

let points = 0;
let selectedCards = 0


// const setStuff = (newStuff) => {
//   stuff = newStuff;
// }

// const useState2 = (defaultValue) => {
//   let stuff = defaultValue;
//
//   const setStuff = (newValue) => {
//     stuff = newValue;
//   }
//
//   return [
//     stuff,
//     setStuff
//   ]
// }

export default function Home() {
  const [cards, setCards] = useState(startingCards);

  function flipCard(index) {
    setCards(prev => {
      const newCards = [...prev];
      newCards[index].open = true;
      return newCards;
    })


  }

  // useEffect(() => {
  //   console.log('fai cose');
  // }, [cards]);

  useEffect(() => {
     selectedCards = cards.filter(card => card.open === true);

    if(selectedCards.length === 2 && selectedCards[0].name === selectedCards[1].name) {
      points ++
      setCards(prev => {
        const newCards = [...prev];
        newCards.map(card => {
          if(card.name === selectedCards[0].name) {
            return card.disabled = true
          }
           return card
        });
        return newCards;
      })
    }

    if (selectedCards.length === 2) {
      setTimeout(() => {
        setCards(prev => {
          const newCards = [...prev];
          newCards.map(card => card.open = false);
          return newCards;
        })
      }, 1000);
    }


  }, [cards])

  return (
    <div className={styles.container}>
      <Head>
        <title>memory game</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>memory game</h1>

        <p className={styles.description}>
          punteggio: {points}
        </p>
        <div className={styles.grid}>
          {cards.map((card, index) => (
            <div className={styles.card} key={index} onClick={() => {
              flipCard(index)
            }}>{card.disabled === true? card.img : card.open ? card.name : index + 1} </div>
          ))}
        </div>

      </main>
    </div>
  );
}
